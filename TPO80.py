from functools import reduce
import os

def Eleccion_Personaje():
    print("üë©Carla: Influencer en como balancear la vida con el estudio (esta reprobando todo)")
    print("üë®Gabriel: Gymbro obsesionado con barritas de proteina")
    print("üê∂Firulais: Guau Guau Guau")
    eleccion=input("Elige tu personaje: ").lower()
    while ((eleccion!="carla") and (eleccion!="gabriel") and (eleccion!="firulais")):
        print("No vale inventar personajes!!!")
        eleccion=input("Elige tu personaje: ").lower()
    if eleccion=='firulais':
        eligio_perro=input("Estas seguro que lo queres a firu? Si/No").lower()
        while eligio_perro=='si':
            print("Guau guau Guau")
            eligio_perro=input("Estas seguro que lo queres a firu? Si/No").lower()
        print("Sera re bueno Firu, pero no me parece la mejor idea para un juego como este. Por sus esfuerzos igual le damos un ü¶¥")
        print("Guau")
        print("De nada, Firu. Ahora si, elegi a tu personaje: ")
        print("üë©Carla: Influencer en como balancear la vida con el estudio (esta reprobando todo)")
        print("üë®Gabriel: Gymbro obsesionado con barritas de proteina")
        eleccion=input("Elige tu personaje: ").lower()
    return eleccion
def Inicio_Juego(personaje, inventario):
    print ("Ma√±ana tengo que entregar el trabajo final de Programacion I y Edesur hizo una de las suyas mientras tenia el Word abierto y sin  el autoguardado."
    "Por suerte, mi amigo ya lo hab√≠a imprimido (impreso o imprimido? A ver que dice la RAE‚Ä¶ Ah cierto, no tengo WIFI")
    print ("Cuando llego a la casa de mi amigo, me doy cuenta que el tambien esta sin luz")
    print (
            """Despues de un pasillo larguisimo, llego a su departamento\n,
            1) Toco la puerta: \n
            2) Toco el timbre: \n
            3)Abro la puerta:""")
    opcion=int(input("¬øQue opcion eliges?\n"))
    while opcion<0 and opcion>4:
        print("No vale inventar opciones")
        print (
            """Despues de un pasillo larguisimo, llego a su departamento\n,
            1) Toco la puerta: \n
            2) Toco el timbre: \n
            3)Abro la puerta:""")
        opcion=int(input("¬øQue opcion eliges?\n"))
    if(opcion==1 or opcion==2):
        print("GUAUUUUUUUUU")
        print("Guau Guau Guau *sonido de rasqueteo en la puerta*")
        print("Este perro aprendio a abrir la puerta????")
    else: 
        print("¬øComo van a dejar la puerta abierta? ¬øCreen que viven en una sitcom?")
    matriz_living[6][2]=1
    ubicacion_personaje=(6,2)
    return ubicacion_personaje 
def Afuera(personaje,inventario):
    #funcion por si se abre la puerta al exterior
    eleccion= input("Aun no has terminado, ¬øSeguro que quieres irte? Si/No\n ").lower()
    while eleccion!='no' and eleccion!= 'si':
        print("Escribiste cualquiera, escribi bien")
        eleccion= input("Aun no has terminado, ¬øSeguro que quieres irte? Si/No\n").lower()
    if eleccion=='si':
        exit()
    elif "no":
        ubicacion_personaje=(6,2)
        Living(inventario,ubicacion_personaje,personaje) 
def Ubicacion_Actual_Personaje(habitacion_actual):
    direcciones = ("w", "s", "a", "d") 
    # Primero buscamos la posici√≥n actual del jugador (el n√∫mero 1)
    for fila in range(len(habitacion_actual)):
        for col in range(len(habitacion_actual[fila])):
            if habitacion_actual[fila][col] == 1:
                fila_jugador = fila
                col_jugador = col
    # Coordenadas relativas a la posici√≥n actual
    coordenadas = [
        (fila_jugador- 1, col_jugador),  # adelante (W)
        (fila_jugador + 1, col_jugador),  # atr√°s (S)
        (fila_jugador, col_jugador - 1),  # izquierda (A)
        (fila_jugador, col_jugador + 1)   # derecha (D)
    ]
    ubicacion_actual=(fila_jugador, col_jugador)
    return ubicacion_actual, coordenadas, direcciones
def Objetos_Cercanos_interactivos(personaje, inventario, nombre_habitacion):
    
    matriz_habitacion=diccionario_matrices[nombre_habitacion]
    objetos_interactivos = []
    objetos_habitacion=diccionario_matrices["objetos "+nombre_habitacion]
    ubicacion_actual,coordenadas,direcciones=Ubicacion_Actual_Personaje(matriz_habitacion)
    fila_jugador,columna_jugador= ubicacion_actual
    objetos_adyacentes = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    for fila, columna in objetos_adyacentes: #cambia la vista del jugador y agrega a la lista los objetos que estan en jugador+-1
        nueva_fila = fila_jugador + fila 
        nueva_columna = columna_jugador + columna

        if 0 <= nueva_fila < len(matriz_habitacion) and 0 <= nueva_columna < len(matriz_habitacion[nueva_fila]): #si la nueva fila es menor al maximo de filas que hay (no cuentan las paredes) && si las columnas son menores al maximo de columnas en esa fila (no cuentan paredes)
            if matriz_habitacion[nueva_fila][nueva_columna] != -1: #muestra todo lo que no sea una pared
                if 0 <= nueva_fila < len(objetos_habitacion) and 0 <= nueva_columna < len(objetos_habitacion[nueva_fila]):
                    objeto = objetos_habitacion[nueva_fila][nueva_columna]
                    if objeto != 0:
                        objetos_interactivos.append(((nueva_fila, nueva_columna), objeto))
    print (objetos_interactivos)
    if objetos_interactivos :
        print("\nObjetos cercanos con los que puedes interactuar:")
        for i, (coordenadas, nombre_objeto) in enumerate(objetos_interactivos):
            print(f"{i + 1}. {nombre_objeto} (fila: {coordenadas[0]}, columna: {coordenadas[1]})")
        print(" Ver Objeto (1) || Agarrar Objeto (2)")
        try:
            accion=int(input (">"))
            if accion not in [1, 2]:
                print("Opci√≥n no v√°lida")
                return
            
            indice_objeto = int(input("Elige el n√∫mero del objeto: ")) -1
            if 0 <= indice_objeto < len(objetos_interactivos):
                coordenadas_objeto, nombre_objeto = objetos_interactivos[indice_objeto]
                if accion==1:
                    VerObjeto(personaje, nombre_objeto, nombre_habitacion)
                elif accion==2:
                    AgarrarObjeto(nombre_habitacion, nombre_objeto, inventario, coordenadas_objeto, objetos_habitacion)
            else:
                print("N√∫mero de objeto inv√°lido.")
        except ValueError:
            print("Por favor, ingresa un n√∫mero.")
    else:
        print("No hay objetos interesantes cerca.")
    return
def procesar_mensaje(mensaje):
    # Extraer cada tercera letra usando slice
    extraer_letra = mensaje[::3]
    
    # Inicializar variables
    palabras = []
    mensaje_en_construcci√≥n = ""
    
    # Iterar sobre cada car√°cter en el mensaje extra√≠do
    for caracter in extraer_letra:
        if caracter.isupper() and mensaje_en_construcci√≥n:
            # Si el car√°cter es may√∫scula y mensaje_en_construcci√≥n no est√° vac√≠o, agregar mensaje_en_construcci√≥n a la lista de palabras
            palabras.append(mensaje_en_construcci√≥n)
            mensaje_en_construcci√≥n = caracter
        else:
            # De lo contrario, agregar el car√°cter a mensaje_en_construcci√≥n
            mensaje_en_construcci√≥n += caracter
    
    # Agregar la √∫ltima palabra a la lista
    if mensaje_en_construcci√≥n:
        palabras.append(mensaje_en_construcci√≥n)
    
    # Convertir el mensaje resultante a min√∫sculas menos la primera letra que debe ir en may√∫scula
    mensaje_descifrado = " ".join(palabras).lower().capitalize()
    
    return mensaje_descifrado
def Mover  (nombre_habitacion):
    habitacion_actual= diccionario_matrices [nombre_habitacion]
    ubicacion_personaje, coordenadas, direcciones =Ubicacion_Actual_Personaje(habitacion_actual)
    fila_jugador=ubicacion_personaje[0]
    col_jugador=ubicacion_personaje[1]
    # Recorremos los movimientos posibles segun la ubicacion del personaje
    movimientos_posibles = []
    for i in range(len(coordenadas)):
        f, c = coordenadas[i]
        if 0 <= f < len(habitacion_actual) and 0 <= c < len(habitacion_actual[0]) and habitacion_actual[f][c] == 0:
            movimientos_posibles.append(direcciones[i])
    adyacentes_con_puertas = []
    for i in range(len(coordenadas)):
        f, c = coordenadas[i]
        if 0 <= f < len(habitacion_actual) and 0 <= c < len(habitacion_actual[0]) and habitacion_actual[f][c] == 2:
            adyacentes_con_puertas.append(direcciones[i])
    print("el jugador esta en: ", fila_jugador,col_jugador)
    print("Movimientos posibles:", movimientos_posibles)
    if adyacentes_con_puertas!=[]:
        print("Puertas objetos_adyacentes:", adyacentes_con_puertas)
#eleccion de movimiento
    movimiento_elegido=input("¬øPara donde te quieres mover?").lower()
    while(movimiento_elegido not in movimientos_posibles) and (movimiento_elegido not in adyacentes_con_puertas):
        print ("Movimiento invalido")
        movimiento_elegido=input("¬øPara donde te quieres mover?").lower()
    habitacion_actual[fila_jugador][col_jugador]=0
    if movimiento_elegido=='w':
        if habitacion_actual[fila_jugador-1][col_jugador]==2:
            destino=Puertas((fila_jugador)-1,col_jugador, nombre_habitacion)
            Cambio_de_Habitacion(destino,ubicacion_personaje)
        habitacion_actual[fila_jugador-1][col_jugador]=1
    elif movimiento_elegido=='s':
        if habitacion_actual[fila_jugador+1][col_jugador]==2:
            destino=Puertas((fila_jugador)+1,col_jugador, nombre_habitacion)
            Cambio_de_Habitacion(destino, ubicacion_personaje)
        habitacion_actual[fila_jugador+1][col_jugador]=1
    elif movimiento_elegido=='a':
        if habitacion_actual[fila_jugador][col_jugador-1]==2:
            destino=Puertas(fila_jugador,(col_jugador)-1, nombre_habitacion)
            Cambio_de_Habitacion(destino, ubicacion_personaje)
        habitacion_actual[fila_jugador][col_jugador-1]=1
    elif movimiento_elegido=='d':
        if habitacion_actual[fila_jugador][col_jugador+1]==2:
            destino=Puertas(fila_jugador,(col_jugador)+1, nombre_habitacion)
            Cambio_de_Habitacion(destino, ubicacion_personaje)
        habitacion_actual[fila_jugador][col_jugador+1]=1
    return
def Cambio_de_Habitacion(destino, ubicacion_personaje):
    """Utiliza informacion del string destino para poder encontrar la habitacion a la que tiene que ir segun el diccionario de matrices y de puertas"""

    if destino=="cocina":
        Cocina(inventario,ubicacion_personaje, personaje )
    elif destino=="ba√±o":
        Ba√±o(inventario, ubicacion_personaje, personaje)
    elif destino=="living":
        Living(inventario, ubicacion_personaje, personaje)
    elif destino=="patio":
        Patio(inventario, ubicacion_personaje, personaje)
    elif destino=="oficina":
        Oficina (inventario, ubicacion_personaje, personaje)
    elif destino=="cuarto principal":
        Cuarto_Principal(inventario, ubicacion_personaje, personaje)
    elif destino=="afuera":
        Afuera(personaje, inventario)
    return destino
def Puertas(fila_jugador, col_jugador, nombre_habitacion):
    nombre_diccionario_puertas = "puertas " + nombre_habitacion
    if nombre_diccionario_puertas not in diccionario_puertas:
        print("ups, encontraste un bug üêõ, sentite bien con vos mismo")
        return None
    habitacion_puerta = diccionario_puertas[nombre_diccionario_puertas]
    for nombre_destino, info in habitacion_puerta.items():
        if "coordenada origen" not in info or "habitacion destino" not in info:
            continue  #salteamos entradas incompletas
        if info["coordenada origen"] == (fila_jugador, col_jugador):
            habitacion_destino = info["habitacion destino"]
            if "coordenada destino" not in info or info["coordenada destino"] is None:
                print("ups, encontraste un bug üêõ, sentite bien con vos mismo")
                return None
            coordenadas_destino = info["coordenada destino"]
            if habitacion_destino not in diccionario_matrices:
                print("ups, no existe la habitacion destino")
                return None
            matriz_destino = diccionario_matrices[habitacion_destino]
            matriz_destino[coordenadas_destino[0]][coordenadas_destino[1]] = 1
            matriz_origen = diccionario_matrices[nombre_habitacion]
            matriz_origen[fila_jugador][col_jugador] = 0
            return habitacion_destino

    return None

def VerObjeto(personaje, objeto,nombre_habitacion):
    try:
        descripcion = diccionario_objetos[nombre_habitacion][objeto][personaje]
        print(descripcion)
    except KeyError:
        print(f" El objeto '{objeto}' no se puede ver o no existe en '{nombre_habitacion}'")
def AgarrarObjeto(nombre_habitacion, nombre_objeto, inventario, coordenadas_objeto, objetos_habitacion):
    if nombre_habitacion in diccionario_objetos:
        dicc_hab = diccionario_objetos.get(nombre_habitacion, {})
        if nombre_objeto in dicc_hab:
            if dicc_hab[nombre_objeto]["inventario"]:
                respuesta = input(f"¬øQuieres guardar '{nombre_objeto}' en tu inventario? (si/no) ").lower()
                if respuesta == "si":
                    inventario.append(nombre_objeto)
                    objetos_habitacion[coordenadas_objeto[0]][coordenadas_objeto[1]] = 0
                    print(f"{nombre_objeto} fue a√±adido al inventario.")
                else:
                    print("No se guardo el objeto.")
            else:
                print("No se puede guardar ese objeto en el inventario.")
        else:
            print("Ese objeto no se puede agarrar.")
def Usar(nombre_objeto, habitacion_actual):
    clave = f"{nombre_objeto}+{habitacion_actual}"
    if clave not in diccionario_accciones_globales:
        print("Este objeto no tiene acciones disponibles.")
        return
    acciones = diccionario_accciones_globales[clave]
    print("Que queres hacer?")
    print(" || ".join(acciones.keys())) #Muestra las acciones disponibles para el objeto
    eleccion = input("> ").lower()
    while eleccion not in acciones:
        print("Opcion no valida")
        eleccion = input(">").lower()

    resultado = acciones[eleccion]
    if callable(resultado): #algunos objetos tienen acciones que son funciones
        resultado() 
    else:
        print(resultado)
def Inventario(inventario, habitacion_actual):
    if not inventario:
        print("El inventario esta vacio")
        return
    print("Inventario:")
    for i, objeto in enumerate(inventario, 1):
        print(f"{i}. {objeto}") #imprime como una lista numerada
    eleccion = input("Que objeto queres usar?").lower()
    if eleccion in inventario:
        Usar(eleccion, habitacion_actual)
    else:
        print("Etse objeto no esta en el inventario")
def Mensajear():
    # funcion para los wpp
    print("Intentas enviar un mensaje...")
    pass
def Hojas():
    pass

def Opciones_Control_de_Personaje(personaje,inventario,nombre_habitacion):
    print("\n¬øQu√© quieres hacer ahora?")
    print("MOVER (1) || VER INVENTARIO (2) || VER OBJETOS CERCANOS (3) ||SALIR (4)") 
    decision = int(input("> "))
    while decision<0 or decision>5:
        print("Opci√≥n no v√°lida.")
        print("\n¬øQu√© quieres hacer ahora?")
        print("MOVER (1) || VER INVENTARIO (2) || VER OBJETOS CERCANOS (3) ||SALIR (4)") 
        decision = int(input("> "))
    while decision!=4:
        try:
            if decision == 1:
                Mover(nombre_habitacion)
            elif decision== 2:
                print("Inventario:", inventario)
            elif decision==3:
                Objetos_Cercanos_interactivos(personaje,inventario,nombre_habitacion)
            elif decision== 4: 
                break
            print("\n¬øQu√© quieres hacer ahora?")
            print("MOVER (1) || VER INVENTARIO (2) || VER OBJETOS CERCANOS (3) ||SALIR (4)") 
            decision = int(input("> "))
        except ValueError:
            print ("Error de valor")
            print("\n¬øQu√© quieres hacer ahora?")
            print("MOVER (1) || VER INVENTARIO (2) || VER OBJETOS CERCANOS (3) ||SALIR (4)") 
  
def Living (inventario, ubicacion_personaje, personaje):
    nombre_habitacion=str("living")
    print(f"\nEst√°s en el {nombre_habitacion}. Observas alrededor...")
    Opciones_Control_de_Personaje(personaje,inventario,nombre_habitacion)

def Patio(inventario, ubicacion_personaje, personaje):
    nombre_habitacion="patio"
    Opciones_Control_de_Personaje(personaje,inventario, nombre_habitacion )
    
def Cuarto_Principal(inventario, ubicacion_personaje, personaje):
    nombre_habitacion="cuarto principal"
    Opciones_Control_de_Personaje(personaje,inventario, nombre_habitacion ) 

def Oficina(inventario, ubicacion_personaje, personaje):
    nombre_habitacion="oficina"
    Opciones_Control_de_Personaje(personaje,inventario, nombre_habitacion )

def Cocina(inventario, ubicacion_personaje, personaje):
   nombre_habitacion="cocina"
   Opciones_Control_de_Personaje(personaje,inventario, nombre_habitacion )

def Ba√±o(inventario, ubicacion_personaje, personaje):
    nombre_habitacion="ba√±o"
    # Definir una tupla con los elementos del estante y sus caracter√≠sticas
    estante_ba√±o = (
    ("Jab√≥n", "l√≠quido"),
    ("Shampoo", "para cabello seco"),
    ("Acondicionador", "hidratante"),
    ("Pasta de dientes", "blanqueadora"),
    ("Cepillo de dientes", "suave"),
    ("Desodorante", "antitranspirante"),
    ("Pa√±uelitos", "extra suave"),
    ("Toalla", "de algod√≥n"),
    ("Perfume", "floral"),
    ("Crema para manos", "nutritiva"),
    ("Gel capilar", "no graso"),
    ("Esponja", "exfoliante"),
    ("Labial", "rojo"),
    ("Mascara de pesta√±as", "tono negro"),
    ("Agua Micelar", "libre de Parabenos"),
    ("Delineador", "l√≠quido"),
    ("Llave", "abre puerta")
    )

    # Mostrar los elementos del estante y sus caracter√≠sticas
    print("Elementos del estante en el ba√±o y sus caracter√≠sticas:")
    for i, (elemento, caracteristica) in enumerate(estante_ba√±o):
        print(f"{i + 1}. {elemento}: {caracteristica}")

    # Preguntar al usuario si desea tomar algo
    respuesta = input('¬øDesea tomar algo del estante? seleccione "Si" o "No": ')

    if respuesta.lower() == 'si':
        elementos_tomados = []
        estante_lista = list(estante_ba√±o)
        
        while True:
            seleccion = int(input("Seleccione el n√∫mero del elemento que desea tomar (ingrese -1 para finalizar): "))
            if seleccion == -1:
                break
            if 1 <= seleccion <= len(estante_lista):
                elemento_tomado = estante_lista[seleccion - 1]
                elementos_tomados.append(elemento_tomado)
                estante_lista[seleccion - 1] = ("", "")  # Llenar el espacio con vac√≠o
            else:
                print("Selecci√≥n no v√°lida. Intente nuevamente.")
        
        # Convertir la lista de nuevo a tupla
        estante_ba√±o = tuple(estante_lista)
        
        # Mostrar los elementos tomados y los elementos restantes
        print("Has tomado los siguientes elementos:")
        for elemento, caracteristica in elementos_tomados:
            print(f"- {elemento}: {caracteristica}")
        
        print("Elementos restantes en el estante:")
        for i, (elemento, caracteristica) in enumerate(estante_ba√±o):
            if elemento is not None:
                print(f"{i + 1}. {elemento}: {caracteristica}")
            else:
                print(f"{i + 1}. [Vac√≠o]")
    else:
        print("No has tomado ning√∫n elemento.")
    # Mensaje cifrado
    mensaje_cifrado = "LasazuHoyolijayasiDdhesolosTipporEyesolteeasiEsenooEmelosBotorotusisoqueunainonahDipemaPriroaisameseparaposososAceunoxyximalosipaocasum"
    #Mostrar mensaje Cifrado
    print(mensaje_cifrado) 
    # Solicitar al usuario si desea descifrar el mensaje
    respuesta = input('Desea descifrar el mensaje: seleccione "Si" o "No": ')

    if respuesta.lower() == 'si':
        resultado = procesar_mensaje(mensaje_cifrado)
        print(f"Mensaje descifrado: {resultado}")
        
        # Lista de n√∫meros
        numeros = [2, 3, 5, 9, 11, 17, 22, 31, 39]
        
        # Mostrar la lista de n√∫meros al usuario
        print(f"Estos n√∫meros te ayudaran a acceder al botiqu√≠n: {numeros}")
        
        # Preguntar al usuario si desea sumar o multiplicar los n√∫meros
        operacion = input('Para abrir el botiqu√≠n, necesitaras la clave de acceso. Seleccione "sumar" o "multiplicar" para obtener una clave: ')
        
        if operacion.lower() == 'sumar':
            suma = sum(numeros)
            print(f"La clave generada es: {suma}. Podes abrir el botiqu√≠n.")
        elif operacion.lower() == 'multiplicar':
            producto = reduce(lambda x, y: x * y, numeros)
            print(f"La clave generada es: {producto}. No abre el botiqu√≠n.")
        else:
            print("La operaci√≥n no es v√°lida.")
    else:
        print("Operaci√≥n cancelada.")


def mostrar_objetos(diccionario):
    for idx, elemento in enumerate(diccionario, 1): #index, enumera como lista
        print(f"{idx}. {elemento}")
    return list(diccionario.keys()) #devuelve como una lista

def elegir_objeto(diccionario):
    objetos = mostrar_objetos(diccionario)
    texto=("Elige un objeto por su n√∫mero:\n> ")
    while True:
        try:
            eleccion_num = int(input(texto)) - 1
            if 0 <= eleccion_num < len(objetos):
                return objetos[eleccion_num]
            else:
                print("N√∫mero fuera de rango.")
        except ValueError:
            print("Por favor, ingresa un n√∫mero v√°lido.")

def realizar_accion(objeto, acciones_dicc):
    acciones = acciones_dicc.get(objeto, {})
    if not acciones:
        print("No hay acciones disponibles para este objeto.")
        return
    print(f"Acciones disponibles: {', '.join(acciones.keys())}")
    accion = input("¬øQu√© acci√≥n deseas realizar?\n> ").strip().lower()
    while accion not in acciones:
        print("Acci√≥n no v√°lida. Intenta nuevamente.")
        accion = input("> ").strip().lower()
    print(acciones[accion])

def interactuar_ba√±o(personaje):

    while True:
        print("\n¬øD√≥nde quieres interactuar?")
        print("1. Objetos del ba√±o")
        print("2. Estante del ba√±o")
        print("3. Salir del ba√±o")
        opcion = input("> ")
        if opcion == "1":
            print("\nObjetos disponibles en el ba√±o:")
            eleccion = elegir_objeto(dicc_objetos_ba√±o)
            print(dicc_objetos_ba√±o[eleccion][personaje])
            realizar_accion(eleccion, acciones_generales_ba√±o)
        elif opcion == "2":
            print("\nObjetos disponibles en el estante del ba√±o:")
            eleccion = elegir_objeto(dicc_objetos_estante_ba√±o)
            print(dicc_objetos_estante_ba√±o[eleccion][personaje])
            realizar_accion(eleccion, acciones_generales_estante_ba√±o)
        elif opcion == "3":
            print("Saliste del ba√±o.")
            break
        else:
            print("Opci√≥n no v√°lida.")

def registrar_interaccion(nombre, objeto, resultado):
    try:
        ruta = "log.txt"
        with open(ruta, "a", encoding="utf-8") as archivo:
            archivo.write(f"{nombre} interactu√≥ con {objeto}: {resultado}\n")
    except Exception as e:
        print("No se pudo guardar el registro.")

"""El diccionario de puertas, se va a leer con el primer elemento siendo las coordenadas de la puerta, y la ubicacion actual. """   
inventario=[]
puertas_living={
    #puertas desde el living
    "cuarto principal": {
       'coordenada origen': (0,1), #si el jugador llega a esa coordenada, es la puerta literal, entonces ahi se hace el cambio de habitacion
       'habitacion destino': 'cuarto principal',
       "coordenada destino": (5,5), #donde "aterriza" en el siguiente cuarto, el 0 se va a convertir en 1
       "estado puerta": "abierta",
    },
    "afuera" : {
        'coordenada origen': (7,2),
        "habitacion destino": "afuera",
    },
    "oficina": {
        'coordenada origen': (0,4),
       'habitacion destino': 'oficina',
       "coordenada destino": (4,2),
       "estado puerta": "abierta",
    },
    "ba√±o": {
        'coordenada origen': (2,0),
       'habitacion destino': 'ba√±o',
       "coordenada destino": (2,3),
       "estado puerta": "abierta",
    },
    "cocina": {
        'coordenada origen': (4,0),
       'habitacion destino': 'cocina',
       "coordenada destino": (2,3),
       "estado puerta": "abierta",
    }
}
puertas_cuarto_principal= {
    #puertas desde cuarto principal
    "living": {
        'coordenada origen': (5,4),
       'habitacion destino': 'living',
       "coordenada destino": (1,2),
       "estado puerta": "abierta",
        },
}
puerta_ba√±o={#puertas desde el ba√±o 
    "living": {
        "coordenada origen": (2,4),
       'habitacion destino': 'living',
       "coordenada destino": (2,1),
       "estado puerta": "abierta",
    }}
puerta_cocina={#puertas desde la cocina 
    "living": {
        'coordenada origen': (2,4),
       'habitacion destino': 'living',
       "coordenada destino": (4,1),
       "estado puerta": "abierta",
    }}
puertas_oficina={#puertas desde la oficina 
    "living": {
        'coordenada origen': (5,2),
       'habitacion destino': 'living',
       "coordenada destino": (1,5),
       "estado puerta": "abierta",
    },
    "patio": {
        'coordenada origen': (3,4),
       'habitacion destino': 'patio',
       "coordenada destino": (2,1),
       "estado puerta": "oculta",
    }}
puerta_patio={ #puerta desde el patio
    "oficina": {
        'coordenada origen': (2,0),
       'habitacion destino': 'oficina',
       "coordenada destino": (3,2),
       "estado puerta": "abierta",
    }}
"""Las matrices de objetos, van a indicar que hay en cada uno y cada uno tiene sus acciones especificas
    Si hay 0 es porque no hay nada, si hay algun objeto, se escribira tal objeto y sus acciones. Las puertas no cuentan como objetos.
    Puede haber objetos en puertas y paredes (afiches, cuadros, estantes)"""
"""La matriz de cada habitacion, tiene su forma arriba. Los cuadrados negros son las paredes, los blancos el piso. Si la matriz tiene 
un 1 es donde esta parado el jugador. Va a haber otra matriz con los objetos que tiene cada "celda". Si hay 0 es lugar donde puede caminar.
Si hay -1 esta prohibido caminar (ya sea porque hay una pared o un mueble), si hay un 2 es una puerta"""
# Definici√≥n de las matrices de objetos, habitaciones y sus diccionarios
matriz_living=[   [-1,2,-1,-1,2,-1],
               [-1,0,0,0,0,0,-1],
               [2,0,0,-1,-1,-1,0,-1],
               [-1,0,0,-1,-1,-1,0,-1],
               [2,0,0,0,0,0,0,-1],
               [-1,0,0,0,-1,-1,0,-1],
               [-1,-1,0,0,0,0,0,-1],
                  [-1,-1,2,-1,-1,-1,-1,-1],]
objetos_living=[[0,0,0,"cuadro",0,0,0,0],
                [0,0,0,0,0,0,0,0],
                ["chapa toilette",0,"alfombra","silla","mesa comedor","silla",0,0],
                [0,0,"alfombra","silla","mesa comedor","silla",0,"cartel prohibido"],
                ["Aca se hacen cosas ricas",0,"alfombra", 0,0,0,0,0],
                ["perchero",0,0,0,"sillon","sillon",0,"cuadro"],
                [0,"paraguero",0,0,0,0,0,0],
                [0,0,"llaves atras puerta",0,"television","television",0,0],]
dicc_objetos_living={
    "cuadro":{
        "carla":"*Carla analiza el cuadro buscando detalles est√©ticos y si podr√≠a ser un buen fondo para sus fotos.*",
        "gabriel":"*Gabriel mira el cuadro sin mucho inter√©s, pensando en si tendr√° suficientes calor√≠as para su pr√≥xima rutina.*",
        "usar": False,
        "inventario" : False, 
    },
    "cucha perro":{
        "carla":"*Carla se acerca a la cucha, pensando si Firulais tendr√° alg√∫n secreto de belleza canino.*",
        "gabriel":"Gabriel revisa la cucha por si acaso Firulais escondi√≥ alguna barrita de prote√≠na.",
        "usar": False,
        "inventario" : False, 
    },
    "chapa toilette":{
        "carla":"Una chapa... quiz√°s tenga un estilo vintage interesante para una storie de Insta.",
        "gabriel":"Gabriel ignora la chapa, enfocado en encontrar algo m√°s √∫til.",
        "usar": False,
        "inventario" : False, 
    },
    "alfombra":{
        "carla":"Que linda alfombra",
        "gabriel":"Una alfombra comun",
        "usar": True, # alfombra living, abajo deberia haber una hoja
        "inventario" : False, 
    },
    "silla":{
        "carla":"*Carla eval√∫a si la silla es c√≥moda para tomarse una selfie.*",
        "gabriel":"Gabriel prueba la firmeza de la silla.",
        "usar": False,
        "inventario" : False, 
    },
    "mesa comedor":{
        "carla":"*Carla se pregunta si la mesa ser√≠a un buen lugar para un unboxing.*",
        "gabriel":"Gabriel se pregunta si la mesa ser√° lo suficientemente resistente para apoyar pesas.",
        "usar": False,
        "inventario" : False, 
    },
    "Cartel: 'Aca se hacen cosas ricas'":{
        "carla":"Mmm, quiz√°s haya alg√∫n snack rico y me tome un break.",
        "gabriel":"Gabriel olfatea el aire: '¬øProte√≠na casera?'",
        "usar": False,
        "inventario" : False, 
    },
    "perchero":{
        "carla":"*Carla revisa las prendas, buscando inspiraci√≥n para su pr√≥ximo outfit.*",
        "gabriel":"Gabriel mira el perchero, buscando alguna toalla para secarse el sudor.",
        "usar": False,
        "inventario" : False, 
    },
    "sillon":{
        "carla":"Ay, este es como el sillon que hice canje por una storie en insta!",
        "gabriel":"Gabriel se sienta brevemente, evaluando si el sill√≥n ofrece buen soporte lumbar.",
        "usar": False,
        "inventario" : False, 
    },
    "paraguero":{
        "carla":"*Carla mira los paraguas, pensando si alguno podr√≠a ser un accesorio de moda inesperado.*",
        "gabriel":"Gabriel mira los paraguas, pensando si alguno podr√≠a servir como improvisada barra de dominadas",
        "usar": False,
        "inventario" : False, 
    },
    "llaves atras puerta":{
        "carla":"*Carla examina el llavero buscando alguna llave que parezca importante o tenga un dise√±o interesante.*",
        "gabriel":"Gabriel mira las llaves sin darle mucha importancia.",
        "usar": False,
        "inventario" : False, 
    },
    "television":{
        "carla":"*Carla mira la televisi√≥n apagada, pensando en qu√© serie estar√° de moda*",
        "gabriel":"Gabriel mira la televisi√≥n apagada, pensando en qu√© canal pasar√°n competencias de fuerza.",
        "usar": False,
        "inventario" : False, 
    },

}
matriz_cocina=[[-1,-1,-1],
               [-1,0,0,-1,-1],#pared, vacio, vacio, heladera, pared
               [-1,-1,0,0,2], #pared, horno y puerta a living
               [-1,0,0,0,-1],
               [-1,-1,-1],]
objetos_cocina = [["pared","pared","pared"],
                  ["pared", "mesada", "comida perro" ,"heladera","pared"],
                  ["pared","cocina",0 ,0 ,0],
                  ["pared", "alacena", "mesada", "mesada", "pared"],
                  ["pared", "pared", "pared",]]
dicc_objetos_cocina = {
    "pared": {
        "carla": "Carla observa la pared, pensando en c√≥mo quedar√≠a un mural de recetas.",
        "gabriel": "Gabriel mira la pared, buscando manchas de salsa o humedad.",
        "usar": False,
        "inventario": False,
    },
    "mesada": {
        "carla": "Carla revisa la mesada, buscando utensilios para preparar algo dulce.",
        "gabriel": "Gabriel limpia la mesada para dejarla lista para cocinar.",
        "usar": True, #key mesada cocina
        "inventario": False,
    },
    "comida perro": {
        "carla": "Carla sonr√≠e al ver el plato de Firulais, pensando si la comida ser√° gourmet.",
        "gabriel": "Gabriel revisa si Firulais ya comi√≥ o necesita m√°s comida.",
        "usar": True, #key comida perro cocina
        "inventario": False,
    },
    "heladera": {
        "carla": "Carla abre la heladera buscando algo fresco para un snack.",
        "gabriel": "Gabriel revisa la heladera para ver si hay suficiente prote√≠na.",
        "usar": True, #key heladera cocina
        "inventario": False,
    },
    "cocina": {
        "carla": "Carla piensa en preparar una receta nueva en la cocina.",
        "gabriel": "Gabriel prende la hornalla para cocinar huevos.",
        "usar": True, #key cocina cocina
        "inventario": False,
    },
    "alacena": {
        "carla": "Carla revisa la alacena buscando ingredientes para una torta.",
        "gabriel": "Gabriel busca arroz y fideos en la alacena.",
        "usar": True, # key alacena cocina
        "inventario": False,
    },
    
}
dicc_objetos_heladera_cocina = {
    "Leche": {
        "carla": "Carla piensa en hacerse un licuado con la leche.",
        "gabriel": "Gabriel revisa si la leche tiene suficiente prote√≠na.",
        "usar": True,
        "inventario": False,
    },
    "Huevos": {
        "carla": "Carla imagina una tortilla para el desayuno.",
        "gabriel": "Gabriel cuenta los huevos para ver si puede hacer omelette.",
        "usar": True,
        "inventario": True,
    },
    "Queso": {
        "carla": "Carla piensa en preparar una picada con el queso.",
        "gabriel": "Gabriel corta una feta de queso para su s√°ndwich.",
        "usar": True,
        "inventario": True,
    },
    "Manteca": {
        "carla": "Carla busca la manteca para untar unas tostadas.",
        "gabriel": "Gabriel derrite un poco de manteca para cocinar.",
        "usar": True,
        "inventario": True,
    },
    "Jugo de naranja": {
        "carla": "Carla se sirve un vaso de jugo bien fr√≠o.",
        "gabriel": "Gabriel toma jugo para hidratarse despu√©s de entrenar.",
        "usar": True,
        "inventario": True,
    },
    "Frutas": {
        "carla": "Carla elige una manzana para una merienda saludable.",
        "gabriel": "Gabriel come una naranja para recuperar energ√≠a.",
        "usar": True,
        "inventario": True,
    },
    "Sobras de comida": {
        "carla": "Carla revisa si las sobras sirven para un almuerzo r√°pido.",
        "gabriel": "Gabriel calienta las sobras para no perder tiempo cocinando.",
        "usar": True,
        "inventario": False,
    },
    "Agua mineral": {
        "carla": "Carla se sirve un vaso de agua bien fr√≠a.",
        "gabriel": "Gabriel toma agua para mantenerse hidratado.",
        "usar": True,
        "inventario": True,
    },
}
acciones_generales_heladera_cocina = {
    "Leche": {
        'revisar': "Una bolsa de leche abierta.",
        'usar': "Te serv√≠s un vaso de leche.",
    },
    "Huevos": {
        'revisar': "Media docena de huevos.",
        'usar': "Us√°s los huevos para cocinar.",
    },
    "Queso": {
        'revisar': "Un trozo de queso cremoso.",
        'usar': "Cort√°s un poco de queso.",
    },
    "Manteca": {
        'revisar': "Un poco de manteca en su envoltorio.",
        'usar': "Us√°s la manteca para untar o cocinar.",
    },
    "Jugo de naranja": {
        'revisar': "Una botella de jugo de naranja.",
        'usar': "Te serv√≠s un vaso de jugo.",
    },
    "Frutas": {
        'revisar': "Manzanas y naranjas frescas.",
        'comer': "Com√©s una fruta.",
    },
    "Sobras de comida": {
        'revisar': "Un tupper con sobras de la cena de anoche.",
        'comer': "Calent√°s y com√©s las sobras.",
    },
    "Agua mineral": {
        'revisar': "Una botella de agua mineral fr√≠a.",
        'usar': "Te serv√≠s un poco de agua.",
    },
}
dicc_objetos_alacena_cocina = {
    "Aceite de oliva": {
        "carla": "Carla piensa en usar el aceite de oliva para una ensalada gourmet.",
        "gabriel": "Gabriel revisa si el aceite sirve para cocinar pollo.",
        "usar": True,
        "inventario": True,
    },
    "Sal fina": {
        "carla": "Carla agrega un poco de sal fina a su receta.",
        "gabriel": "Gabriel revisa si hay suficiente sal para sazonar.",
        "usar": True,
        "inventario": True,
    },
    "Az√∫car rubia": {
        "carla": "Carla usa el az√∫car rubia para endulzar su caf√©.",
        "gabriel": "Gabriel piensa en preparar avena con az√∫car rubia.",
        "usar": True,
        "inventario": True,
    },
    "Harina 000": {
        "carla": "Carla planea hacer una torta con la harina 000.",
        "gabriel": "Gabriel revisa si hay harina suficiente para panqueques.",
        "usar": True,
        "inventario": True,
    },
    "Arroz largo fino": {
        "carla": "Carla piensa en preparar una ensalada de arroz.",
        "gabriel": "Gabriel cocina arroz para acompa√±ar el pollo.",
        "usar": True,
        "inventario": True,
    },
    "Fideos tirabuz√≥n": {
        "carla": "Carla elige los fideos tirabuz√≥n para una pasta r√°pida.",
        "gabriel": "Gabriel hierve los fideos para la cena.",
        "usar": True,
        "inventario": True,
    },
    "Lentejas secas": {
        "carla": "Carla prepara una sopa de lentejas.",
        "gabriel": "Gabriel cocina lentejas para sumar prote√≠na.",
        "usar": True,
        "inventario": True,
    },
    "Caf√© instant√°neo": {
        "carla": "Carla se prepara un caf√© instant√°neo para la tarde.",
        "gabriel": "Gabriel toma caf√© para despertarse.",
        "usar": True,
        "inventario": True,
    },
    "T√© verde": {
        "carla": "Carla disfruta de una taza de t√© verde.",
        "gabriel": "Gabriel prueba el t√© verde aunque prefiere caf√©.",
        "usar": True,
        "inventario": True,
    },
    "Yerba con palo": {
        "carla": "Carla prepara un mate con la yerba.",
        "gabriel": "Gabriel ceba mate para compartir.",
        "usar": True,
        "inventario": True,
    },
    "Galletitas dulces": {
        "carla": "Carla come unas galletitas dulces con su t√©.",
        "gabriel": "Gabriel se come unas galletitas de postre.",
        "usar": True,
        "inventario": True,
    },
    "Cacao en polvo": {
        "carla": "Carla usa el cacao en polvo para hacer chocolatada.",
        "gabriel": "Gabriel mezcla cacao en polvo con leche.",
        "usar": True,
        "inventario": True,
    },
    "Mermelada de frutilla": {
        "carla": "Carla unta mermelada de frutilla en una tostada.",
        "gabriel": "Gabriel agrega mermelada a su pan integral.",
        "usar": True,
        "inventario": True,
    },
    "Enlatados at√∫n": {
        "carla": "Carla abre una lata de at√∫n para una ensalada.",
        "gabriel": "Gabriel come at√∫n directo de la lata.",
        "usar": True,
        "inventario": True,
    },
    "Especias or√©gano": {
        "carla": "Carla espolvorea or√©gano en su pizza casera.",
        "gabriel": "Gabriel usa or√©gano para condimentar la comida.",
        "usar": True,
        "inventario": True,
    },
    "Pan integral": {
        "carla": "Carla prepara una tostada de pan integral.",
        "gabriel": "Gabriel come pan integral con queso.",
        "usar": True,
        "inventario": True,
    },
    "Servilletas doble hoja": {
        "carla": "Carla usa una servilleta para limpiar la mesa.",
        "gabriel": "Gabriel agarra una servilleta para no ensuciarse.",
        "usar": True,
        "inventario": True,
    },
}
acciones_generales_alacena_cocina = {
    "Aceite de oliva": {
        'revisar': "Una botella de aceite de oliva, casi llena.",
        'usar': "Pod√©s usar el aceite para cocinar.",
    },
    "Sal fina": {
        'revisar': "Un paquete de sal fina, bien cerrado.",
        'usar': "Pod√©s usar la sal para sazonar la comida.",
    },
    "Az√∫car rubia": {
        'revisar': "Un frasco con az√∫car rubia.",
        'usar': "Pod√©s usar el az√∫car para endulzar.",
    },
    "Harina 000": {
        'revisar': "Un paquete de harina 000.",
        'usar': "Pod√©s usar la harina para hacer masa.",
    },
    "Arroz largo fino": {
        'revisar': "Un paquete de arroz largo fino.",
        'usar': "Pod√©s cocinar arroz.",
    },
    "Fideos tirabuz√≥n": {
        'revisar': "Un paquete de fideos tirabuz√≥n.",
        'usar': "Pod√©s hervir los fideos.",
    },
    "Lentejas secas": {
        'revisar': "Un paquete de lentejas secas.",
        'usar': "Pod√©s cocinar las lentejas.",
    },
    "Caf√© instant√°neo": {
        'revisar': "Un frasco de caf√© instant√°neo.",
        'usar': "Pod√©s preparar caf√©.",
    },
    "T√© verde": {
        'revisar': "Un paquete de t√© verde.",
        'usar': "Pod√©s preparar t√©.",
    },
    "Yerba con palo": {
        'revisar': "Un paquete de yerba con palo.",
        'usar': "Pod√©s preparar un mate.",
    },
    "Galletitas dulces": {
        'revisar': "Un paquete de galletitas dulces.",
        'comer': "Com√©s unas galletitas.",
    },
    "Cacao en polvo": {
        'revisar': "Un frasco de cacao en polvo.",
        'usar': "Pod√©s preparar chocolate.",
    },
    "Mermelada de frutilla": {
        'revisar': "Un frasco de mermelada de frutilla.",
        'usar': "Pod√©s untar la mermelada en pan.",
    },
    "Enlatados at√∫n": {
        'revisar': "Una lata de at√∫n.",
        'abrir': "Abr√≠s la lata de at√∫n.",
    },
    "Especias or√©gano": {
        'revisar': "Un frasco de or√©gano.",
        'usar': "Pod√©s usar el or√©gano para condimentar.",
    },
    "Pan integral": {
        'revisar': "Un paquete de pan integral.",
        'comer': "Com√©s una rebanada de pan.",
    },
    "Servilletas doble hoja": {
        'revisar': "Un paquete de servilletas doble hoja.",
        'usar': "Pod√©s usar una servilleta.",
    },
}
matriz_ba√±o=[[-1,-1,-1],
            [-1,-1,0,-1,-1],#pared, primera parte de la ba√±era, nada, inodoro, pared
            [-1,-1,-1,0,2],#pared, segunda parte ba√±era, lavamanos, nada, puerta a living
            [-1,-1,-1],] #pared, espejo, pared
objetos_ba√±o = [
                ["llave ducha", "espejo", -1],
                [-1, "ba√±era", "lavamanos" ,0 , "inodoro", -1],
                [-1, "ba√±era", 0 , 0 , -1],
                [-1,2,"estante"],
                ]
dicc_objetos_ba√±o = {
    "llave ducha": {
        "carla": "Carla revisa la llave de la ducha, pensando en un ba√±o relajante.",
        "gabriel": "Gabriel verifica si la ducha funciona bien para despu√©s de entrenar.",
        "usar": True,
        "inventario": False,
    },
    "espejo": {
        "carla": "Carla se mira en el espejo y se arregla el pelo.",
        "gabriel": "Gabriel se mira en el espejo y se acomoda la remera.",
        "usar": False,
        "inventario": False,
    },
    "ba√±era": {
        "carla": "Carla sue√±a con un ba√±o de burbujas.",
        "gabriel": "Gabriel piensa en usar la ba√±era para relajar los m√∫sculos.",
        "usar": True,
        "inventario": False,
    },
    "lavamanos": {
        "carla": "Carla se lava las manos con jab√≥n perfumado.",
        "gabriel": "Gabriel se lava la cara para despertarse.",
        "usar": True,
        "inventario": False,
    },
    "inodoro": {
        "carla": "Carla revisa si hay papel higi√©nico.",
        "gabriel": "Gabriel se asegura de que el inodoro funcione.",
        "usar": True,
        "inventario": False,
    },
    "estante": {
        "carla": "Carla revisa el estante buscando cremas y perfumes.",
        "gabriel": "Gabriel busca desodorante en el estante.",
        "usar": True,
        "inventario": False,
    },
}
acciones_generales_estante_ba√±o = {
    "Shampoo": {
        'revisar': "Una botella de shampoo casi llena.",
        'usar': "Te lav√°s el pelo con shampoo.",
    },
    "Acondicionador": {
        'revisar': "Una botella de acondicionador.",
        'usar': "Us√°s el acondicionador para suavizar el pelo.",
    },
    "Jab√≥n": {
        'revisar': "Una pastilla de jab√≥n perfumado.",
        'usar': "Te lav√°s las manos con jab√≥n.",
    },
    "Crema hidratante": {
        'revisar': "Un pote de crema hidratante.",
        'usar': "Te pon√©s crema en las manos.",
    },
    "Perfume": {
        'revisar': "Un frasco de perfume.",
        'usar': "Te perfum√°s un poco.",
    },
    "Desodorante": {
        'revisar': "Un desodorante en aerosol.",
        'usar': "Us√°s el desodorante.",
    },
    "Toalla": {
        'revisar': "Una toalla limpia y suave.",
        'usar': "Te sec√°s con la toalla.",
    },
    "Cepillo de dientes": {
        'revisar': "Un cepillo de dientes de cerdas suaves.",
        'usar': "Te lav√°s los dientes.",
    },
    "Pasta dental": {
        'revisar': "Un tubo de pasta dental casi vac√≠o.",
        'usar': "Pon√©s pasta dental en tu cepillo y te lav√°s los dientes.",
    },
}
acciones_generales_ba√±o = {
    "llave ducha": {
        'abrir': "Abr√≠s la llave de la ducha y sale agua.",
        'cerrar': "Cerr√°s la llave de la ducha.",
    },
    "espejo": {
        'mirar': "Te ves reflejado en el espejo.",
        'limpiar': "Limpi√°s el espejo y queda reluciente.",
    },
    "ba√±era": {
        'llenar': "Llen√°s la ba√±era con agua caliente.",
        'vaciar': "Vaci√°s la ba√±era.",
    },
    "lavamanos": {
        'usar': "Us√°s el lavamanos para lavarte.",
        'revisar': "El lavamanos est√° limpio y tiene jab√≥n.",
    },
    "inodoro": {
        'usar': "Us√°s el inodoro.",
        'revisar': "El inodoro est√° limpio y tiene papel.",
    },
    "estante": {
        'abrir': "Abr√≠s el estante y ves varios productos.",
        'revisar': "Hay cremas, perfumes y otros art√≠culos de higiene.",
        'tomar': "Pod√©s tomar algo del estante.",
    },
}
dicc_objetos_estante_ba√±o = {
    "Shampoo": {
        "carla": "Carla elige el shampoo con aroma a frutos rojos.",
        "gabriel": "Gabriel busca el shampoo anticaspa.",
        "usar": True,
        "inventario": True,
    },
    "Acondicionador": {
        "carla": "Carla usa el acondicionador para dejar su pelo suave.",
        "gabriel": "Gabriel no suele usar acondicionador, pero lo mira curioso.",
        "usar": True,
        "inventario": True,
    },
    "Jab√≥n": {
        "carla": "Carla toma el jab√≥n perfumado.",
        "gabriel": "Gabriel agarra el jab√≥n para lavarse las manos.",
        "usar": True,
        "inventario": True,
    },
    "Crema hidratante": {
        "carla": "Carla se pone un poco de crema hidratante en las manos.",
        "gabriel": "Gabriel se pregunta si la crema sirve para despu√©s de afeitarse.",
        "usar": True,
        "inventario": True,
    },
    "Perfume": {
        "carla": "Carla se pone un poco de perfume.",
        "gabriel": "Gabriel huele el perfume y decide no usarlo.",
        "usar": True,
        "inventario": True,
    },
    "Desodorante": {
        "carla": "Carla revisa si el desodorante es antitranspirante.",
        "gabriel": "Gabriel usa el desodorante despu√©s de entrenar.",
        "usar": True,
        "inventario": True,
    },
    "Toalla": {
        "carla": "Carla toma una toalla limpia.",
        "gabriel": "Gabriel agarra una toalla para secarse.",
        "usar": True,
        "inventario": True,
    },
    "Cepillo de dientes": {
        "carla": "Carla busca su cepillo de dientes rosa.",
        "gabriel": "Gabriel revisa si su cepillo est√° seco.",
        "usar": True,
        "inventario": True,
    },
    "Pasta dental": {
        "carla": "Carla pone un poco de pasta dental en su cepillo.",
        "gabriel": "Gabriel revisa si queda suficiente pasta dental.",
        "usar": True,
        "inventario": True,
    },
}
matriz_cuarto_principal=[[-1,-1,-1,-1,-1],#pared del cuarto
                        [-1,-1,-1,-1,-1,-1,-1],#pared, mesa de luz, camax3, mesa de luz, pared
                        [-1,0,-1,-1,-1,0,-1],
                        [-1,0,-1,-1,-1,0,-1],
                        [-1,-1,0,0,0,0,-1],#pared, mesa de maquillaje, vacio
                        [-1,-1,-1,-1, 0,0,-1],#pared, mesa de maquillaje, zapatero, vacio y pared
                        [-1,-1,-1,2,-1],]#pared y puerta a living
objetos_cuarto_principal=[["pared","pared","pared","pared","pared","pared","pared"],#pared del cuarto
                        ["pared","mesa de luz1","cama","cama","cama","mesa de luz2","pared"],#pared, mesa de luz, camax3, mesa de luz, pared
                        ["pared",0,"cama","cama","cama",0,"pared"],
                        ["pared",0,"cama1","cama","cama2",0,"pared"],
                        ["pared","mesa",0,0,0,0,"pared"],#pared, mesa de maquillaje, vacio
                        ["pared","mesa","zapatero","zapatero", 0,0,"closet"],#pared, mesa de maquillaje, zapatero, vacio y pared
                        ["pared","pared","pared","pared",2,"pared","pared"],]#pared y puerta a living
dicc_objetos_cuarto_principal={ 
    "pared": {
        'carla': "me encanta el color de la pared, es como un verde musgo", #lo que ve Carla
       'gabriel': "una pared nomas", #lo que ve gabriel
       'usar': False, # si el objeto puede usarse
       'inventario': False, #si el objeto puede ser guardado en inventario o no  
    },
    "closet": {
        'carla': "Un poco chico el closet, y muy desordenado!", #lo que ve Carla
       'gabriel': "Que buena coleccion de camisetas de futbol!", #lo que ve gabriel
       'usar': False, # si el objeto puede usarse
       'inventario': False, #si el objeto puede ser guardado en inventario o no  
    },
    "mesa de luz1": {
        'carla': "una mesa de luz con 2 cajones, estilo nordico, del lado izquierdo de la cama", #lo que ve Carla
       'gabriel': "una mesa de luz con 2 cajones, del lado izquierdo de la cama", #lo que ve gabriel
       'usar': True, # si el objeto puede usarse
       'inventario': False, #si el objeto puede ser guardado en inventario o no  
    },
    "mesa de luz2": {
        'carla': "una mesa de luz con 2 cajones, estilo nordico, del lado derecho de la cama", #lo que ve Carla
       'gabriel': "una mesa de luz con 2 cajones, del lado derecho de la cama", #lo que ve gabriel
       'usar': True, # si el objeto puede usarse
       'inventario': False, #si el objeto puede ser guardado en inventario o no  
    }, 
    "cama": {
        'carla': "una cama queen, sin hacer, cuanto se mueve el due√±o de casa eh", #lo que ve Carla
       'gabriel': "una cama grande...jajaj ni el due√±o de casa hace la cama, con razon es mi amigo", #lo que ve gabriel
       'usar': False, # key, cama cuarto principal
       'inventario': False, #si el objeto puede ser guardado en inventario o no  
    },  
    "cama1": {
        'carla': "la esquina inferior izquierda de la cama... parece que hubiera algo entre el somier y el colchon", #lo que ve Carla
       'gabriel': "la esquina inferior izquierda de la cama... parece que hubiera algo entre la cama y el colchon", #lo que ve gabriel
       'usar': True, # key, cama1 cuarto principal
       'inventario': False, #si el objeto puede ser guardado en inventario o no  
    }, 
    "cama2": {
        'carla': "la esquina inferior derecha de la cama... parece que hubiera algo abajo de la cama... un monstruo? jsjs", #lo que ve Carla
       'gabriel': "la esquina inferior derecha da de la cama... parece que hubiera algo abajo de la cama...", #lo que ve gabriel
       'usar': True, # key, cama2 cuarto principal
       'inventario': False, #si el objeto puede ser guardado en inventario o no  
    }, 
    "mesa": {
        'carla': "Que desorden, una mesa llena de cosas", #lo que ve Carla
       'gabriel': "Una mesa llena de boludeces", #lo que ve gabriel
       'usar': True, # key, mesa cuarto principal
       'inventario': False, #si el objeto puede ser guardado en inventario o no  
    }, 
    "zapatero": {
        'carla': "Un zapatero lleno de botines", #lo que ve Carla
       'gabriel': "EUUU altas llantas", #lo que ve gabriel
       'usar': False, # key, mesa cuarto principal
       'inventario': False, #si el objeto puede ser guardado en inventario o no  
    }, 
    
}
matriz_oficina=[[-1,-1,-1],
                [-1,-1,-1,-1,-1],#paredes y escritorio
                [-1,0,-1,0,-1], #paredes y silla
                [-1,0,0,-1,-1],#paredes y biblioteca 
                [-1,0,0,-1,2],#paredes y biblioteca con puerta oculta
                [-1,2,-1],]
objetos_oficina=[[-1,-1,-1],
                [-1,-1,"escritorio",-1,-1],
                [-1,0,"silla",0,-1], 
                ["cuadro",0,0,-1,"biblioteca"],
                [-1,0,0,-1,"biblioteca"],
                [-1,2,-1],]
dicc_objetos_oficina = {
    "pared": {
        "carla": "Que horrible color tiene la pared",
        "gabriel": "la pared tiene manchas de humedad...",
        "usar": False,
        "inventario": False,
    },
    "escritorio": {
        "carla": "Este escritorio es parecido al de pap√°",
        "gabriel": "Podr√≠a poner una PC Gamer y viciar toda la noche",
        "usar": True,
        "inventario": False,
    },
    "silla": {
        "carla": "una silla c√≥moda, ideal para hacer vivos en tiktok mientras me maquillo",
        "gabriel": "una silla giratoria con ruedas... puedo usarla para moverme de un lado a otro",
        "usar": True,
        "inventario": False,
    },
    "cuadro": {
        "carla": "un cuadro abstracto que no entiendo pero me gusta. Creo que podr√≠a pintar uno igual",
        "gabriel": "una pintura moderna, probablemente sea muy cara",
        "usar": False,
        "inventario": False,
    },
    "biblioteca": {
        "carla": "¬øNo hay revistas de moda o maquillaje en esta biblioteca?",
        "gabriel": "No veo ning√∫n comic o manga",
        "usar": True,
        "inventario": False,
    },
    "puerta oculta": {
        "carla": "parece una biblioteca... pero hay algo raro en ella",
        "gabriel": "hay una rendija, como si se pudiera abrir...",
        "usar": True,
        "inventario": False,
    }
}
matriz_patio=[[-1,-1,-1,-1],
                      [-1,-1,-1,-1,-1,-1],
                      [2,0,0,-1,0,-1],
                      [-1,0,-1,0,0,-1],
                      [-1,0,0,0,-1,-1],
                      [-1,-1,-1,-1],]
objetos_patio=[["enredadera","pared","pared","pared"],
                      ["enredadera","cucha perro","arbol","pozo","cobertizo", "pared"],
                      ["puerta",0,"lapida1","arbol",0,"pared"],
                      ["placa","banco","pozo","lapida2",0,"pared"],
                      ["enredadera","lapida3",0,0,"pozo","pared"],
                      ["enredadera","enredadera","pared","pared"],]
dicc_objetos_patio={ 
    "enredadera": {
        'carla': "que linda enredaderaüåøüåø, me encantaria que en mi casa haya una asi", #lo que ve Carla
       'gabriel': "una planta que cubre la paredüåøüåø", #lo que ve gabriel
       'usar': False, # si el objeto puede usarse
       'inventario': False, #si el objeto puede ser guardado en inventario o no  
    },
    "pared": {
        'carla': "ay alguien deberia darle una mano de pintura a esta pared",
       'gabriel': "una pared descascarada",
       'usar': False, 
       'inventario': False,
    }, 
    "cucha perro": {
        'carla': "aww la casita de firu",
       'gabriel': "alta home la de firu",
       'usar': False, 
       'inventario': False,
    }, 
    "arbol":{
        'carla': "un arbol de limones frescosüå≤üçã",
        'gabriel': "un arbol de limones frescosüå≤üçã",
        'usar': False,
        'inventario':False, 
    },
    "pozo": {
        'carla': "una gran monta√±a de tierra... parece que alguien planto algo hace poco.",
        'gabriel': "un monticulo de tierra. Parece que alguien enterro algo hace poco tiempo.",
        'usar': False,
        'inventario':False, 
    },
    "cobertizo": {
        'carla': "un cobertizo. Parece cerrado pero no tiene manija... que raro ", #adentro del cobertizo hay una caja con un candado numerico
        'gabriel': "un cobertizo. No tiene manija, pero deberia poder abrirse ",
        'usar': False, #cuando se accione la placa, se cambiara a true y podra entrar
        'inventario':False, 
    },
    "lapida1": {
        'carla': "Una lapida? Muy creepy para un patio... A ver que dice... ü™¶Ruben Grabal 29/08/1934-18/10/2009 \"Amado padre, marido y segundo lugar de la mejor pizza del mundo mundial\" ", 
        'gabriel': "Eso es una lapida?? üò≥üò≥,ü™¶Ruben Grabal 29/08/1934-18/10/2009 \" Amado padre, marido y segundo lugar de la mejor pizza del mundo mundial\" ",
        'usar': False,
        'inventario':False, 
    },
    "placa": {
        'carla': "Que es eso? Detras de la enredadera? ", 
        'gabriel': "Hay algo detras de la enredadera? ",
        'usar': True, #placa patio es el key que hay que usar
        'inventario':False, 
    },
    "banco": {
        'carla': "Un banco para poder sentarme un rato y mirar todo el patio ", 
        'gabriel': "Un banco para sentarse y mirar todo el patio",
        'usar': True, #banco patio es el key que hay que usar
        'inventario':False, 
    },
    "lapida2": {
        'carla': "Otra lapida?? A ver que dice esta...ü™¶ Maria Dolores Grimaldi de Grabal 7/10/1939-25/06/2014 \" Amada madre y ganadora de la mejor pizza del mundo mundial \" ", 
        'gabriel': "Otra lapida?? A ver que dice...ü™¶ Maria Dolores Grimaldi de Grabal 7/10/1939-25/06/2014 \" Amada madre y ganadora de la mejor pizza del mundo mundial \" ", 
        'usar': False,
        'inventario':False, 
    },
    "lapida3": {
        'carla': "Otra lapida mas? Pero que es esto? El cementerio de Chacarita? A ver que dice esta...ü™¶ Pedro Grabal 06/10/1987- 12/05/2007 \"Amado hermano y catador de pizzas \" ", 
        'gabriel': "Otra lapida mas? Esto no parece muy legal que digamos... A ver que dice...ü™¶ Pedro Grabal 06/10/1987- 12/05/2007 \"Amado hermano y catador de pizzas \" ", 
        'usar': False,
        'inventario':False, 
    },
    
}
diccionario_matrices= {
    "living": matriz_living,
    "objetos living": objetos_living,
    "cocina": matriz_cocina,
    "objetos cocina": objetos_cocina,
    "ba√±o": matriz_ba√±o,
    "objetos ba√±os" : objetos_ba√±o,
    "cuarto principal": matriz_cuarto_principal,
    "objetos cuarto principal": objetos_cuarto_principal,
    "oficina": matriz_oficina,
    "objetos oficina": objetos_oficina,
    "patio": matriz_patio,
    "objetos patio": objetos_patio,
}
diccionario_puertas={
    "puertas living" : puertas_living,
    "puertas ba√±o" : puerta_ba√±o,
    "puertas cocina" : puerta_cocina,
    "puertas patio" : puerta_patio,
    "puertas cuarto principal" : puertas_cuarto_principal,
    "puertas oficina" : puertas_oficina, 
}
diccionario_objetos={
    "living": dicc_objetos_living,
    "patio": dicc_objetos_patio,
    "ba√±o": dicc_objetos_ba√±o,
    "cocina":dicc_objetos_cocina ,
    "cuarto principal": dicc_objetos_cuarto_principal, 
    "oficina": dicc_objetos_oficina,
}
diccionario_accciones_globales={
    ("placa patio"): {
        'mover enredadera': "hay una placa detras de la enredadera",
        'leer': "\"Gracias por siempre empujarme a ser mejor\"",
        'empujar': "La placa se metio para dentro de la pared... y ese ruido? Parece como que se haya abierto una puerta",
        'tirar': "No puedo tirar de la placa, esta atornillada a la pared"
    },
    ("banco patio"): {
        'sentarse': "Al fin puedo descansar un poco",
        'apreciar la vista sentado': "Wow, la enredadera si que esta crecida, lo mismo como los 2 arboles de limones, hay 3 lapidas y por algun motivo 3 monticulos de tierra nuevos...",
        'disociar': "...",
    },
    ("llaves atras puerta living"): {
        'guardar en inventario': inventario.append("llaves living"),
        'ver': "una llave roja, una electronica y una dorada", 
    },
    ("escritorio oficina"): {
        'abrir caj√≥n': "El caj√≥n est√° vac√≠o... o eso parece.",
        'revisar': "Hay mucha basura y cosas viejas guardadas.",
    },
    ("silla oficina"): {
        'sentarse': "Gir√°s un poco.",
        'moverse': "Te desliz√°s por la oficina como si fuera una pista de hielo.",
        'guardar en inventario': "No pod√©s llevar la silla de la casa de tu amigo.",
        },
    ("cuadro oficina"): {
        'mirar': "Es un cuadro abstracto, con formas que parecen moverse si lo mir√°s mucho tiempo.",
        'tocar': "La pintura est√° seca, pero hay algo raro en el marco...",
        },
    ("biblioteca oficina"): {
        'revisar libros': "Muchos libros de derecho, historia y... ¬øuna novela rom√°ntica?",
        'empujar': "¬°Click! Algo se movi√≥ detr√°s...",
        },
    ("puerta oculta oficina"): {
        'abrir': "La biblioteca se corre revelando una puerta secreta.",
        'entrar': "Pas√°s por la puerta oculta hacia otra habitaci√≥n...",
        },
    ("pared oficina"): {
        'golpear': "Suena hueco en algunas partes.",
        'mirar': "Pared blanca con manchas de humedad.",
        },
    ("mesa cuarto principal"): {
        "ver": "hay 3 anteojos de Tommy, 6 relojes de marca y 5 figuritas del mundial"        
        },
    ("cama2 cuarto principal"): {
        "ver": "la esquina de la cama",    
        "mirar abajo de la cama": "esta una de las hojas del TP!",
        },
    ("cama1 cuarto principal"): {
        "ver": "la esquina de la cama",   
        "levantar el colchon": "uyy que pesado... Que es eso?? Una hoja con estos dibujos? ‚åö‚öΩüï∂",
        },
    ("mesa de luz1 cuarto principal"): {
        "abrir primer cajon": "A ver que hay... NONONONOOON aca no hay nada importante!!!",      
        "abrir segundo cajon": "algunos comics de Batman y unas revistas viejas",
        },
    ("mesa de luz2 cuarto principal"): {
        "abrir primer cajon": "Que miedo abrir los cajones de la mesa de luz de alguien... Ah esta bien, solo hay unas flores y un rosario",      
        "abrir segundo cajon": "Una caja fuerte... que raro, tiene 3 numeros",
        },
    ("mesada cocina"): {
        'revisar': "Hay algunos utensilios y migas de pan sobre la mesada.",
        'limpiar': "Limpi√°s la mesada, ahora est√° reluciente.",
    },
    ("comida perro cocina"): {
        'revisar': "Un plato con comida para Firulais.",
        'servir': "Le serv√≠s comida a Firulais. ¬°Est√° feliz!",
    },
    ("heladera cocina"): {
        'abrir': "Abr√≠s la heladera. Hay algunas cosas para picar.",
        'revisar': "Ves leche, huevos y un poco de queso.",
    },
    ("cocina cocina "): {
        'prender': "Encend√©s la hornalla, lista para cocinar.",
        'revisar': "La cocina est√° limpia y lista para usar.",
    },
    ("alacena cocina"): {
        'abrir': "Abr√≠s la alacena y ves varios alimentos.",
        'revisar': "Hay paquetes de arroz, fideos, az√∫car y m√°s.",
        'tomar': "Pod√©s tomar algo de la alacena.",
    },
    ("llave ducha ba√±o"): {
        'abrir': "Abr√≠s la llave de la ducha y sale agua.",
        'cerrar': "Cerr√°s la llave de la ducha.",
    },
    ("espejo ba√±o"): {
        'mirar': "Te ves reflejado en el espejo.",
        'limpiar': "Limpi√°s el espejo y queda reluciente.",
    },
    ("ba√±era ba√±o"): {
        'llenar': "Llen√°s la ba√±era con agua caliente.",
        'vaciar': "Vaci√°s la ba√±era.",
    },
    ("lavamanos ba√±o"): {
        'usar': "Us√°s el lavamanos para lavarte.",
        'revisar': "El lavamanos est√° limpio y tiene jab√≥n.",
    },
    ("inodoro ba√±o"): {
        'usar': "Us√°s el inodoro.",
        'revisar': "El inodoro est√° limpio y tiene papel.",
    },
    ("estante ba√±o"): {
        'abrir': "Abr√≠s el estante y ves varios productos.",
        'revisar': "Hay cremas, perfumes y otros art√≠culos de higiene.",
        'tomar': "Pod√©s tomar algo del estante.",
    },
}

"""--------------------------------------------------------------------------------------------------------------------------"""    
#main 

personaje=Eleccion_Personaje()
ubicacion_personaje=Inicio_Juego(personaje, inventario )
Living(inventario, ubicacion_personaje,personaje)









